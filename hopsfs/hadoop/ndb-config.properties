#
#    Do not add spaces in the file. it is also used by some deployment scripts that fail if there are redundant spaces
#    https://github.com/hopshadoop/clusterj/blob/35b498945a8df83848da13dc658f7457f122157d/src/main/java/com/mysql/clusterj/Constants.java
#
com.mysql.clusterj.connectstring=11.160.43.143
com.mysql.clusterj.database=hopsfs
# This is the number of connections that are created in the ClusterJ connection pool. 
# The name of the connection pool size property. This is the number of connections to create in the connection
# pool. The default is 1 (all sessions share the same connection; all requests for a SessionFactory with the same
# connect string and database will share a single SessionFactory). A setting of 0 disables pooling; each request
# for a SessionFactory will receive its own unique SessionFactory.
com.mysql.clusterj.connection.pool.size=1
#Maximum number transactions that can be simultaneously executed using the clusterj client. The maximum support transactions are 1024.
com.mysql.clusterj.max.transactions=1024

io.hops.metadata.ndb.mysqlserver.data_source_class_name = com.mysql.cj.jdbc.MysqlDataSource

#Address of MySQL server. For higher performance we use MySQL Server to perform a aggregate queries on the file system metadata.
io.hops.metadata.ndb.mysqlserver.host=11.160.43.168
#io.hops.metadata.ndb.mysqlserver.host=11.160.43.130
io.hops.metadata.ndb.mysqlserver.port=3306
io.hops.metadata.ndb.mysqlserver.username=root
io.hops.metadata.ndb.mysqlserver.password=LaLa123!
# Number of NDB connections used by the MySQL Server. The default is set to 10.
io.hops.metadata.ndb.mysqlserver.connection_pool_size=1

#For performance reasons the data access layer maintains a pools of pre-allocated ClusterJ session objects.
#size of the session pool. should be altreat as big as the number of active RPC handling Threads in the system
io.hops.session.pool.size=1000

#Session is reused Random.getNextInt(0,io.hops.session.reuse.count) times and then it is GCed
#use smaller values if using java 6.
#if you use java 7 or higer then use G1GC and there is no need to close sessions. use Int.MAX_VALUE
io.hops.session.reuse.count=2147483647

